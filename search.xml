<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Error: Cannot find module 'hexo-util']]></title>
    <url>%2F2017%2F03%2F27%2FError-Cannot-find-module-hexo-util%2F</url>
    <content type="text"><![CDATA[升级NexT主题以后，执行hexo clean，出错： 12345678910111213141516171819202122232425✗ hexo clean ERROR Script load failed: themes/next/scripts/tags/exturl.jsError: Cannot find module 'hexo-util' at Function.Module._resolveFilename (module.js:325:15) at Function.Module._load (module.js:276:25) at Module.require (module.js:353:17) at require (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/lib/hexo/index.js:213:21) at /Users/lisanlai/lisanlai.github.io/themes/next/scripts/tags/exturl.js:8:12 at /Users/lisanlai/lisanlai.github.io/node_modules/hexo/lib/hexo/index.js:229:12 at tryCatcher (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:502:31) at Promise._settlePromise (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:559:18) at Promise._settlePromise0 (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:604:10) at Promise._settlePromises (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:683:18) at Promise._fulfill (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:628:18) at Promise._resolveCallback (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:423:57) at Promise._settlePromiseFromHandler (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:514:17) at Promise._settlePromise (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:559:18) at Promise._settlePromise0 (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:604:10) at Promise._settlePromises (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:683:18) at Promise._fulfill (/Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/promise.js:628:18) at /Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/bluebird/js/release/nodeback.js:42:21 at /Users/lisanlai/lisanlai.github.io/node_modules/hexo/node_modules/hexo-fs/node_modules/graceful-fs/graceful-fs.js:78:16 at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)INFO Deleted database. 解决办法：重新安装hexo-util模块 npm install -- save-dev hexo-util]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jira rest api 使用经验]]></title>
    <url>%2F2017%2F03%2F26%2FJira-rest-api-%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[1. JIRA REST API 可以做什么？The Atlassian REST APIs provide a standard interface for interacting with JIRA and our other applications. REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. REST APIs operate over HTTP(s) making it easy to use with any programming language or framework. The input and output format for the JIRA REST APIs is JSON. 我们可以通过REST API去访问收保护的资源，例如增、删、改、查ISSUES 。。。。。 支持标准的HTTP method，例如 GET, PUT, POST , DELETE 所有的API的input 和 output 都是 JSON 格式。 Rest API Reference ： https://developer.atlassian.com/jiradev/jira-apis/jira-rest-apis REST URI 结构 ： http://host:port/context/rest/api-name/api-version/resource-name 资源列表 ： https://developer.atlassian.com/static/rest/jira/6.1.html 2. JIRA REST API鉴权方式The REST APIs support basic authentication, cookie-based (session) authentication, and OAuth. See the examples of basic authentication, cookie-based authentication, and OAuth. JIRA REST API 支持3种鉴权方式： basic authentication cookie-based authentication OAuth 目前JIRA REST API 只支持OAuth1.0 3. 如何使用OAuth方式鉴权因为basic authentication 和 cookie-based authentication两种方式比较简单，且不推荐使用，这里我说说推荐使用的OAuth方式如何玩。 首先需要到Jira上配置Application link，注册一个新的consumer 配置客户端oauth信息 Step1: Create application linkJIRA Administration &gt; System &gt; Applications tab &gt; Application links Step2: Configuring the client OAuth Config value request token url JIRA_BASE_URL + “/plugins/servlet/oauth/request-token” authorization url JIRA_BASE_URL + “/plugins/servlet/oauth/authorize”” access token url JIRA_BASE_URL + “/plugins/servlet/oauth/access-token” oauth signing type RSA-SHA1，需要生成key pair，且粘贴public key到oauth配置里面 consumer key Step1里面配置的值 4. 使用Java client来获取access tokenJava oauth client 是基于John Kristian的源码做了一些改进 Github ：https://github.com/lisanlai/jira.oauth.client 12345678910111213141516171819202122232425262728293031323334/** * Created by lisanlai on 2017/3/27. */public class ClientTest &#123; private static final String BASEURL = "Jira domain url"; private static final String CONSUMER_KEY = "你自己配置的consumer key"; private static final String CONSUMER_PRIVATE_KEY = "你自己生成的RSA private key"; private static final String CALLBACK_URI = "http://requestb.in/12f4ung1"; public static void main(String[] args) throws Exception &#123; AtlassianOAuthClient jiraoAuthClient = new AtlassianOAuthClient(CONSUMER_KEY, CONSUMER_PRIVATE_KEY, BASEURL, CALLBACK_URI); //STEP 1: 获取request token TokenSecretVerifierHolder requestToken = jiraoAuthClient.getRequestToken(); String authorizeUrl = jiraoAuthClient.getAuthorizeUrlForToken(requestToken.token); System.out.println("Token is " + requestToken.token); System.out.println("Token secret is " + requestToken.secret); System.out.println("Retrieved request token. go to " + authorizeUrl); //STEP2 : 授权， 打开STEP1里面获取到的authorize url //登录jira并点击allow按钮 //STEP3 : 获取 access token //getAccessToken("810qrpbOePqXdMRWcoOuMLdoBoLuh9To", "M4O6qaRC4OVDKzQOCcVrmvvpCNkYmhpm", "0aOMdW"); &#125; public static void getAccessToken(String requestToken, String tokenSecret, String verifier) throws OAuthException, IOException, URISyntaxException &#123; AtlassianOAuthClient jiraoAuthClient = new AtlassianOAuthClient(CONSUMER_KEY, CONSUMER_PRIVATE_KEY, BASEURL, CALLBACK_URI); String accessToken = jiraoAuthClient.swapRequestTokenForAccessToken(requestToken, tokenSecret, verifier); System.out.println("Access token is : " + accessToken); &#125;&#125; 5. 使用REST API创建/修改/查询issue123456789101112131415161718String accessToken = "access token";String requestUrl = JIRA_BASE_URL + "/rest/api/2/issue";String jsonBody = "&#123;\n" + " \"fields\": &#123;\n" + " \"project\":\n" + " &#123; \n" + " \"key\": \"ASYNC\"\n" + " &#125;,\n" + " \"summary\": \"REST ye merry gentlemen.\",\n" + " \"description\": \"Creating of an issue using project keys and issue type names using the REST API\",\n" + " \"issuetype\": &#123;\n" + " \"name\": \"Bug\"\n" + " &#125;\n" + " &#125;\n" + "&#125;";String responseAsString = jiraoAuthClient.makeAuthenticatedRequest(accessToken, OAuthMessage.POST, requestUrl, Collections.emptySet(), jsonBody);System.out.println("RESPONSE IS" + responseAsString); 6. JIRA OAuth dance]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JIRA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring-Boot Mybatis 多数据源配置]]></title>
    <url>%2F2016%2F12%2F14%2FSpring-Boot-Mybatis-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[这篇文章涉及到的类和配置文件列表： pom.xml application.properties MybatisProperties.java AbstractDatasourceConfig.java ReadDatasourceConfig.java PrimaryDatasourceConfig.java 添加依赖：pom.xml 1234567891011121314151617181920&lt;dependency&gt; &lt;groupId&gt;com.zaxxer&lt;/groupId&gt; &lt;artifactId&gt;HikariCP&lt;/artifactId&gt; &lt;version&gt;2.5.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.3.4.RELEASE&lt;/version&gt;&lt;/dependency&gt; 添加数据源配置项：application.properties 1234567891011#primary datasource settingdatasource.primary.name=dmsdb_primarydatasource.primary.username=devdbdatasource.primary.password=******datasource.primary.jdbcUrl=jdbc:mysql://127.0.0.1:3306/dmsdb_primary?autoReconnect=true&amp;characterEncoding=UTF-8#read datasource settingdatasource.read.name=dmsdb_readdatasource.read.username=devdbdatasource.read.password=******datasource.read.jdbcUrl=jdbc:mysql://127.0.0.1:3306/dmsdb_read?autoReconnect=true&amp;characterEncoding=UTF-8 添加MybatisProperities的配置项：application.properties 123456#mybatis settingmybatis.config-location=classpath:mybatis/mybatis-config.xmlmybatis.mapper-locations=classpath:mybatis/mapper/**/*.xmlmybatis.type-aliases-package=zoomus.addons.modelmybatis.check-config-location=falsemybatis.executor-type=reuse 创建类: MybatisProperities.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package zoomus.addons.config.properties;import org.apache.commons.lang3.builder.ToStringBuilder;import org.springframework.boot.context.properties.ConfigurationProperties;import org.apache.ibatis.session.ExecutorType;import org.springframework.core.io.Resource;/** * Created by lisanlai on 2016/12/13. */@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)public class MybatisProperties &#123; public static final String MYBATIS_PREFIX = "mybatis"; private Resource configLocation; private Resource[] mapperLocations; private String typeAliasesPackage; private String typeHandlersPackage; private boolean checkConfigLocation = false; private ExecutorType executorType = ExecutorType.SIMPLE; public Resource getConfigLocation() &#123; return configLocation; &#125; public void setConfigLocation(Resource configLocation) &#123; this.configLocation = configLocation; &#125; public Resource[] getMapperLocations() &#123; return this.mapperLocations; &#125; public void setMapperLocations(Resource[] mapperLocations) &#123; this.mapperLocations = mapperLocations; &#125; public String getTypeHandlersPackage() &#123; return this.typeHandlersPackage; &#125; public void setTypeHandlersPackage(String typeHandlersPackage) &#123; this.typeHandlersPackage = typeHandlersPackage; &#125; public String getTypeAliasesPackage() &#123; return this.typeAliasesPackage; &#125; public void setTypeAliasesPackage(String typeAliasesPackage) &#123; this.typeAliasesPackage = typeAliasesPackage; &#125; public boolean isCheckConfigLocation() &#123; return this.checkConfigLocation; &#125; public void setCheckConfigLocation(boolean checkConfigLocation) &#123; this.checkConfigLocation = checkConfigLocation; &#125; public ExecutorType getExecutorType() &#123; return this.executorType; &#125; public void setExecutorType(ExecutorType executorType) &#123; this.executorType = executorType; &#125; @Override public String toString() &#123; return new ToStringBuilder(this) .append("configLocation", configLocation) .append("mapperLocations", mapperLocations) .append("typeAliasesPackage", typeAliasesPackage) .append("typeHandlersPackage", typeHandlersPackage) .append("checkConfigLocation", checkConfigLocation) .append("executorType", executorType) .toString(); &#125;&#125; 创建类： AbstractDatasourceConfig.java 12345678910111213141516171819202122232425262728package zoomus.addons.config;import org.apache.ibatis.session.SqlSessionFactory;import org.mybatis.spring.SqlSessionFactoryBean;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import zoomus.addons.config.properties.MybatisProperties;import javax.sql.DataSource;/** * Created by lisanlai on 2016/12/13. */public abstract class AbstractDatasourceConfig &#123; private static final Logger logger = LoggerFactory.getLogger(AbstractDatasourceConfig.class); public SqlSessionFactory sqlSessionFactory(DataSource primaryDataSource, MybatisProperties properties) throws Exception &#123; logger.info("Initializing sqlSessionFactory; properties = &#123;&#125;", properties); final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(primaryDataSource); sessionFactory.setConfigLocation(properties.getConfigLocation()); sessionFactory.setMapperLocations(properties.getMapperLocations()); sessionFactory.setTypeAliasesPackage(properties.getTypeAliasesPackage()); sessionFactory.setTypeHandlersPackage(properties.getTypeHandlersPackage()); return sessionFactory.getObject(); &#125;&#125; 创建类： PrimaryDatasourceConfig.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package zoomus.addons.config;import org.apache.ibatis.session.SqlSessionFactory;import org.mybatis.spring.annotation.MapperScan;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import org.springframework.transaction.annotation.EnableTransactionManagement;import zoomus.addons.config.properties.MybatisProperties;import javax.sql.DataSource;/** * Created by lisanlai on 2016/12/13. */@Configuration@EnableTransactionManagement@EnableConfigurationProperties(MybatisProperties.class)@MapperScan(basePackages = PrimaryDatasourceConfig.PACKAGE, sqlSessionFactoryRef = "primarySqlSessionFactory")public class PrimaryDatasourceConfig extends AbstractDatasourceConfig&#123; /** 指定java mapper 接口的包路径 */ static final String PACKAGE = "zoomus.addons.repository.mybatis.primary"; private static Logger logger = LoggerFactory.getLogger(PrimaryDatasourceConfig.class); @Autowired private MybatisProperties properties; @Bean @Primary @ConfigurationProperties(prefix="datasource.primary") public DataSource primaryDataSource() &#123; logger.info("Initializing primaryDataSource..."); return DataSourceBuilder.create().build(); &#125; @Bean(name = "primaryTransactionManager") @Primary public DataSourceTransactionManager primaryTransactionManager() &#123; logger.info("Initializing primaryTransactionManager..."); return new DataSourceTransactionManager(primaryDataSource()); &#125; @Bean(name = "primarySqlSessionFactory") @Primary public SqlSessionFactory primarySqlSessionFactory() throws Exception &#123; logger.info("Initializing primarySqlSessionFactory..."); return sqlSessionFactory(primaryDataSource(), properties); &#125;&#125; 创建类： ReadDatasourceConfig.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package zoomus.addons.config;import org.apache.ibatis.session.SqlSessionFactory;import org.mybatis.spring.annotation.MapperScan;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import org.springframework.transaction.annotation.EnableTransactionManagement;import zoomus.addons.config.properties.MybatisProperties;import javax.sql.DataSource;/** * Created by lisanlai on 2016/12/13. */@Configuration@EnableTransactionManagement@EnableConfigurationProperties(MybatisProperties.class)@MapperScan(basePackages = ReadDatasourceConfig.PACKAGE, sqlSessionFactoryRef = "readSqlSessionFactory")public class ReadDatasourceConfig extends AbstractDatasourceConfig&#123; /** 指定java mapper 接口的包路径 */ static final String PACKAGE = "zoomus.addons.repository.mybatis.read"; private static Logger logger = LoggerFactory.getLogger(ReadDatasourceConfig.class); @Autowired private MybatisProperties properties; @Bean @ConfigurationProperties(prefix="datasource.read") public DataSource readDataSource() &#123; logger.info("Initializing readDataSource..."); return DataSourceBuilder.create().build(); &#125; @Bean(name = "readTransactionManager") public DataSourceTransactionManager readTransactionManager() &#123; logger.info("Initializing readTransactionManager..."); return new DataSourceTransactionManager(readDataSource()); &#125; @Bean(name = "readSqlSessionFactory") public SqlSessionFactory readSqlSessionFactory() throws Exception &#123; logger.info("Initializing readSqlSessionFactory..."); return sqlSessionFactory(readDataSource(), properties); &#125;&#125; 添加Mapper类到相对应的package路径 Primary mapper package static final String PACKAGE = “zoomus.addons.repository.mybatis.primary”; Read mapper package static final String PACKAGE = “zoomus.addons.repository.mybatis.read”; 使用演示 12345678910111213141516171819202122232425262728293031@Servicepublic class DemoServiceImpl implements DemoService &#123; .... private final DemoPrimaryMapper demoPrimaryMapper; private final DemoReadMapper demoReadMapper; @Autowired public DemoServiceImpl(DemoPrimaryMapper demoPrimaryMapper, demoReadMapper demoReadMapper) &#123; Assert.notNull(demoPrimaryMapper, "demoPrimaryMapper must not be null!"); Assert.notNull(demoReadMapper, "demoReadMapper must not be null!"); this.demoPrimaryMapper = demoPrimaryMapper; this.demoReadMapper = demoReadMapper; &#125; @Override public void saveDemoObject(DemoObject demoObject) &#123; demoPrimaryMapper.save(demoObject); &#125; @Override public DemoObject getDemoObject(String id) &#123; return demoReadMapper.get(id); &#125; //如果需要使用注解事务，需要指定事务管理器，如： @Transactional("primaryTransactionManager") ....&#125; ​]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring-boot-starter-data-redis 乱码]]></title>
    <url>%2F2016%2F11%2F30%2Fspring-boot-starter-data-redis-%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[RedisTemplate源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class RedisTemplate&lt;K, V&gt; extends RedisAccessor implements RedisOperations&lt;K, V&gt;, BeanClassLoaderAware &#123; private boolean enableTransactionSupport = false; private boolean exposeConnection = false; private boolean initialized = false; private boolean enableDefaultSerializer = true; private RedisSerializer&lt;?&gt; defaultSerializer; private ClassLoader classLoader; private RedisSerializer keySerializer = null; private RedisSerializer valueSerializer = null; private RedisSerializer hashKeySerializer = null; private RedisSerializer hashValueSerializer = null; private RedisSerializer&lt;String&gt; stringSerializer = new StringRedisSerializer(); .... //spring-boot-starter-data-redis 默认情况下使用的是JdkSerializationRedisSerializer //这个地方是导致redis key乱码的根本原因 //需要做的就是替换一下keySerializer 和 hashKeySerializer if (defaultSerializer == null) &#123; defaultSerializer = new JdkSerializationRedisSerializer( classLoader != null ? classLoader : this.getClass().getClassLoader()); &#125; if (enableDefaultSerializer) &#123; if (keySerializer == null) &#123; keySerializer = defaultSerializer; defaultUsed = true; &#125; if (valueSerializer == null) &#123; valueSerializer = defaultSerializer; defaultUsed = true; &#125; if (hashKeySerializer == null) &#123; hashKeySerializer = defaultSerializer; defaultUsed = true; &#125; if (hashValueSerializer == null) &#123; hashValueSerializer = defaultSerializer; defaultUsed = true; &#125; &#125; &#125;&#125; 重新申明RedisTemplate并设置keySerializer 和 hashKeySerializer 123456789101112@Configurationpublic class RedisConfiguration &#123; @Bean public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123; RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;Object, Object&gt;(); template.setKeySerializer(new StringRedisSerializer()); template.setHashKeySerializer(new StringRedisSerializer()); template.setConnectionFactory(redisConnectionFactory); return template; &#125;&#125; ​]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>spring_boot</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从源码编译安装nginx]]></title>
    <url>%2F2016%2F11%2F23%2F%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx%2F</url>
    <content type="text"><![CDATA[参考文档： 参考文档 下载nginx源码：download 预先下载所需模块：pcre nginx_ngx_cache_purge zlib 安装ssl模块：yum -y install openssl openssl-devel 安装gcc编译器：yum install -y gcc gcc-c++ 目录结构如下： 123456[devadmin_sam@hzserver nginx]$ ll总用量 24drwxr-xr-x 9 devadmin_sam dev 4096 11月 23 13:12 nginx-1.10.2drwxr-xr-x 3 devadmin_sam dev 4096 12月 24 2014 ngx_cache_purge-2.3drwxr-xr-x 9 devadmin_sam dev 12288 11月 23 13:14 pcre-8.39drwxr-xr-x 14 devadmin_sam dev 4096 11月 23 13:14 zlib-1.2.8 编译参数： 12345678910111213141516171819202122232425262728293031323334353637383940./configure\--prefix=/etc/nginx\--sbin-path=/usr/sbin/nginx\--conf-path=/etc/nginx/nginx.conf\--error-log-path=/var/log/nginx/error.log\--http-log-path=/var/log/nginx/access.log\--pid-path=/var/run/nginx.pid\--lock-path=/var/run/nginx.lock\--http-client-body-temp-path=/var/cache/nginx/client_temp\--http-proxy-temp-path=/var/cache/nginx/proxy_temp\--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp\--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp\--http-scgi-temp-path=/var/cache/nginx/scgi_temp\--user=nginx\--group=nginx\--with-http_ssl_module\--with-http_realip_module\--with-http_addition_module\--with-http_sub_module\--with-http_dav_module\--with-http_flv_module\--with-http_mp4_module\--with-http_gunzip_module\--with-http_gzip_static_module\--with-http_random_index_module\--with-http_secure_link_module\--with-http_stub_status_module\--with-http_auth_request_module\--with-threads\--with-stream\--with-stream_ssl_module\--with-http_slice_module\--with-mail\--with-mail_ssl_module\--with-file-aio\--with-http_v2_module\--with-ipv6\--with-pcre=../pcre-8.39\--with-zlib=../zlib-1.2.8\--add-module=../ngx_cache_purge-2.3 make &amp;&amp; make install]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java进程占用CPU过高排查方法]]></title>
    <url>%2F2016%2F07%2F27%2FJava%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8CPU%E8%BF%87%E9%AB%98%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.利用TOP命令查看，发现Java进程持续占高CPUPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 4233 root 20 0 6667m 2.3g 8312 S 264.1 30.4 79979:06 java 2.利用TOP -H找到对应进程下面线程的耗CPU情况# top -H -p 4233 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 7041 root 20 0 6667m 2.3g 8312 S 20.1 30.4 5524:52 java 7048 root 20 0 6667m 2.3g 8312 S 18.8 30.4 5098:27 java 9625 root 20 0 6667m 2.3g 8312 S 18.5 30.4 7205:30 java 10111 root 20 0 6667m 2.3g 8312 S 17.8 30.4 6008:08 java 10254 root 20 0 6667m 2.3g 8312 S 17.8 30.4 6001:12 java 10923 root 20 0 6667m 2.3g 8312 S 17.5 30.4 5999:17 java 10033 root 20 0 6667m 2.3g 8312 S 17.1 30.4 6004:10 java 4353 root 20 0 6667m 2.3g 8312 S 16.8 30.4 7209:04 java 9685 root 20 0 6667m 2.3g 8312 S 16.8 30.4 6002:45 java 7042 root 20 0 6667m 2.3g 8312 S 16.5 30.4 7193:56 java 9910 root 20 0 6667m 2.3g 8312 S 16.5 30.4 6010:04 java 10893 root 20 0 6667m 2.3g 8312 S 16.5 30.4 7195:46 java 4235 root 20 0 6667m 2.3g 8312 S 15.5 30.4 815:26.39 java 4238 root 20 0 6667m 2.3g 8312 R 12.9 30.4 815:54.11 java 4236 root 20 0 6667m 2.3g 8312 S 12.5 30.4 811:10.16 java 4237 root 20 0 6667m 2.3g 8312 S 9.6 30.4 814:50.57 java 4239 root 20 0 6667m 2.3g 8312 S 2.0 30.4 752:01.99 java 4294 root 20 0 6667m 2.3g 8312 S 0.7 30.4 56:16.83 java 4280 root 20 0 6667m 2.3g 8312 S 0.3 30.4 68:25.58 java 4233 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:00.00 java 4234 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:07.16 java 4240 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:10.14 java 4241 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:08.93 java 4242 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:00.00 java 4243 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:52.14 java 4244 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:47.82 java 4245 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:00.00 java 4246 root 20 0 6667m 2.3g 8312 S 0.0 30.4 19:30.64 java 4249 root 20 0 6667m 2.3g 8312 S 0.0 30.4 0:03.20 java 3.将需要查看的线程ID转换为16进制格式# printf &quot;%x\n&quot; 7041 1b81 4.打印线程的堆栈信息# jstack 4233|grep 1b81 -A 30 &quot;http-80-61&quot; daemon prio=10 tid=0x00007f75e8067000 nid=0x1b81 runnable [0x00007f75733f1000] java.lang.Thread.State: RUNNABLE at com.saas.biz.commen.FilterChar.ignoreCaseIndexOf(FilterChar.java:94) at com.saas.biz.commen.FilterChar.repex(FilterChar.java:41) at com.saas.sys.dbm.Dbexecute.setQueryParam(Dbexecute.java:627) at com.saas.sys.dbm.Dbexecute.selBizQuery(Dbexecute.java:426) at com.saas.biz.dao.areaDAO.AreaExt.selByList(AreaExt.java:25) at com.saas.biz.AreaInfoMgr.AreaInfo.getAllClassListForAdd(AreaInfo.java:1493) at org.apache.jsp.car.supplier_jsp._jspService(supplier_jsp.java:116) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:723) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:388) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) at javax.servlet.http.HttpServlet.service(HttpServlet.java:723) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302) at org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) at org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) at org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) at org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:470) 5.在堆栈信息里面找到你熟悉的字眼，去排查相关问题。]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CPU过高</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件提取利器-Apache Tika]]></title>
    <url>%2F2016%2F04%2F29%2F%E6%96%87%E4%BB%B6%E6%8F%90%E5%8F%96%E5%88%A9%E5%99%A8-Apache-Tika%2F</url>
    <content type="text"><![CDATA[Description: The Apache Tika™ toolkit detects and extracts metadata and text from over a thousand different file types (such as PPT, XLS, and PDF).功能描述：Apache Tika 可以发现和提取各种各样类型文件的元数据（meatadata）和文件内容，例如:PPT，XLS 和PDF等等。 @官网tika.apache.org Using Tika as a Maven dependency&lt;dependency&gt; &lt;groupId&gt;org.apache.tika&lt;/groupId&gt; &lt;artifactId&gt;tika-core&lt;/artifactId&gt; &lt;version&gt;1.13&lt;/version&gt; &lt;/dependency&gt; If you want to use Tika to parse documents (instead of simply detecting document types, etc.), you’ll want to depend on tika-parsers instead: &lt;dependency&gt; &lt;groupId&gt;org.apache.tika&lt;/groupId&gt; &lt;artifactId&gt;tika-parsers&lt;/artifactId&gt; &lt;version&gt;1.13&lt;/version&gt; &lt;/dependency&gt; 使用案例：利用Tika获取文件的Content-TypeString[] files = new String[]{ &quot;/Users/lisanlai/Desktop/file.docx&quot;, &quot;/Users/lisanlai/Desktop/file.xlsx&quot;, &quot;/Users/lisanlai/Desktop/file.pptx&quot;, &quot;/Users/lisanlai/Desktop/file.md&quot;, &quot;/Users/lisanlai/Desktop/file.txt&quot;, &quot;/Users/lisanlai/Desktop/Test.java&quot; }; for (int i = 0; i &lt; files.length; i++) { TikaConfig tikaConfig = TikaConfig.getDefaultConfig();; Metadata metadata = new Metadata(); MimeTypes mimeRegistry = tikaConfig.getMimeRepository(); String filename = files[i]; metadata.set(Metadata.RESOURCE_NAME_KEY, filename); System.out.println(i+ &quot; = [&quot; + mimeRegistry.detect(null, metadata) + &quot;]&quot;); } System.out.println(&quot;=========================================&quot;); for (int i = 0; i &lt; files.length; i++) { TikaConfig tikaConfig = TikaConfig.getDefaultConfig();; Metadata metadata = new Metadata(); String filename = files[i]; Path path = FileSystems.getDefault().getPath(filename); InputStream stream = TikaInputStream.get(path); Detector detector = tikaConfig.getDetector(); MediaType mediaType = detector.detect(stream, metadata); System.out.println(i+ &quot; = [&quot; + detector.detect(stream, metadata) + &quot;]&quot; + &quot; ==== &quot; + mediaType.getSubtype()); } 打印结果如下： 0 = [application/vnd.openxmlformats-officedocument.wordprocessingml.document] 1 = [application/vnd.openxmlformats-officedocument.spreadsheetml.sheet] 2 = [application/vnd.openxmlformats-officedocument.presentationml.presentation] 3 = [text/x-web-markdown] 4 = [text/plain] 5 = [text/x-java-source] ========================================= 0 = [application/vnd.openxmlformats-officedocument.wordprocessingml.document] ==== vnd.openxmlformats-officedocument.wordprocessingml.document 1 = [application/vnd.openxmlformats-officedocument.spreadsheetml.sheet] ==== vnd.openxmlformats-officedocument.spreadsheetml.sheet 2 = [application/vnd.openxmlformats-officedocument.presentationml.presentation] ==== vnd.openxmlformats-officedocument.presentationml.presentation 3 = [text/plain] ==== plain 4 = [text/plain] ==== plain 5 = [text/plain] ==== plain]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>Tika</tag>
        <tag>文件提取</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置MySQL主从复制]]></title>
    <url>%2F2016%2F04%2F22%2F%E9%85%8D%E7%BD%AEMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%2F</url>
    <content type="text"><![CDATA[MySQL 服务器: 10.224.144.135（主) 10.224.144.138（从） 配置主服务器：编辑/etc/my.cnf # vi /etc/my.cnf #add for replication log-bin=/var/lib/mysql/log-bin server-id=1 binlog-do-db = test binlog-do-db = CLOPSDB binlog-ignore-db = mysql innodb_flush_log_at_trx_commit=1 sync_binlog=1 #add for replication relay-log=/var/lib/mysql/relay-bin relay-log-index=/var/lib/mysql/relay-bin.index log_slave_updates = 1 auto_increment_increment = 2 auto_increment_offset = 1 保存退出 ，在master机上为slave机添加一同步帐号 #mysql –u root –p Paswod: &gt;grant replication slave on *.* to &apos;clopsrepl&apos;@&apos;10.224.144.138&apos; identified by &apos;cscocmse&apos;; &gt;quit 重启MySQL服务 #service mysql restart 为从服务器指定主服务器： # mysql -u root -p Enter password: &gt;CHANGE MASTER TO MASTER_HOST=&apos;10.224.144.135&apos;, MASTER_USER=&apos;clopsrepl&apos;, MASTER_PASSWORD=&apos;cscocmse&apos;; &gt;start slave; 如果要设置master-master #那么在10.224.144.138上执行 &gt;grant replication slave on *.* to &apos;clopsrepl&apos;@&apos;10.224.144.135&apos; identified by &apos;cscocmse&apos;; &gt;quit #再在10.224.144.135上执行： &gt;CHANGE MASTER TO MASTER_HOST=&apos;10.224.144.138&apos;, MASTER_USER=&apos;clopsrepl&apos;, MASTER_PASSWORD=&apos;cscocmse&apos;; &gt;start slave;]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>MySQL</tag>
        <tag>MySQL主从配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security Filter Ordering]]></title>
    <url>%2F2016%2F04%2F22%2FSpring-Security-Filter-Ordering%2F</url>
    <content type="text"><![CDATA[The order that filters are defined in the chain is very important. Irrespective of which filters you are actually using, the order should be as follows: ChannelProcessingFilter, because it might need to redirect to a different protocol SecurityContextPersistenceFilter, so a SecurityContext can be set up in the SecurityContextHolder at the beginning of a web request, and any changes to the SecurityContext can be copied to the HttpSession when the web request ends (ready for use with the next web request) ConcurrentSessionFilter, because it uses the SecurityContextHolder functionality and needs to update theSessionRegistry to reflect ongoing requests from the principal Authentication processing mechanisms - UsernamePasswordAuthenticationFilter, CasAuthenticationFilter,BasicAuthenticationFilter etc - so that the SecurityContextHolder can be modified to contain a valid Authenticationrequest token The SecurityContextHolderAwareRequestFilter, if you are using it to install a Spring Security awareHttpServletRequestWrapper into your servlet container The JaasApiIntegrationFilter, if a JaasAuthenticationToken is in the SecurityContextHolder this will process theFilterChain as the Subject in the JaasAuthenticationToken RememberMeAuthenticationFilter, so that if no earlier authentication processing mechanism updated theSecurityContextHolder, and the request presents a cookie that enables remember-me services to take place, a suitable remembered Authentication object will be put there AnonymousAuthenticationFilter, so that if no earlier authentication processing mechanism updated theSecurityContextHolder, an anonymous Authentication object will be put there ExceptionTranslationFilter, to catch any Spring Security exceptions so that either an HTTP error response can be returned or an appropriate AuthenticationEntryPoint can be launched FilterSecurityInterceptor, to protect web URIs and raise exceptions when access is denied]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>spring security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Algorithm HmacSHA256 not available]]></title>
    <url>%2F2016%2F04%2F21%2FAlgorithm-HmacSHA256-not-available%2F</url>
    <content type="text"><![CDATA[场景： 有一段代码需要访问Amazon，直接执行main方法是没问题的。可是把代码打成jar包，用ProcessBuilder执行java -jar的方式来run的时候，抛出了Exception。 Algorithm HmacSHA256 not available 异常信息Exception in thread &quot;pool-1-thread-1&quot; com.amazonaws.AmazonClientException: Unable to calculate a request signature: Unable to calculate a request signature: Algorithm HmacSHA256 not available at com.amazonaws.auth.AbstractAWSSigner.sign(AbstractAWSSigner.java:81) at com.amazonaws.auth.AWS4Signer.computeSignature(AWS4Signer.java:289) at com.amazonaws.auth.AWS4Signer.sign(AWS4Signer.java:127) at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:646) at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:454) at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:294) at com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient.invoke(AmazonDynamoDBClient.java:3106) at com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient.batchWriteItem(AmazonDynamoDBClient.java:771) at com.amazonaws.services.dynamodbv2.document.internal.BatchWriteItemImpl.doBatchWriteItem(BatchWriteItemImpl.java:111) at com.amazonaws.services.dynamodbv2.document.internal.BatchWriteItemImpl.batchWriteItem(BatchWriteItemImpl.java:52) at com.amazonaws.services.dynamodbv2.document.DynamoDB.batchWriteItem(DynamoDB.java:159) at com.saasbee.webapp.service.search.DocumentService.store(DocumentService.java:79) at com.saasbee.webapp.service.search.thread.ParseTaskThread.run(ParseTaskThread.java:97) at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source) Caused by: com.amazonaws.AmazonClientException: Unable to calculate a request signature: Algorithm HmacSHA256 not available at com.amazonaws.auth.AbstractAWSSigner.sign(AbstractAWSSigner.java:91) at com.amazonaws.auth.AbstractAWSSigner.sign(AbstractAWSSigner.java:79) ... 15 more Caused by: java.security.NoSuchAlgorithmException: Algorithm HmacSHA256 not available at javax.crypto.Mac.getInstance(Mac.java:181) at com.amazonaws.auth.AbstractAWSSigner.sign(AbstractAWSSigner.java:87) ... 16 more Algorithm HmacSHA256 not available 解决办法 猜测应该是Amazon的security有关方面的问题。最终我的解决方法如下：在pom.xml里面加入${JAVA_HOME}/jre/lib/sunjce_provider.jar的依赖，然后重新package，异常消失。 &lt;dependency&gt; &lt;groupId&gt;org.sun&lt;/groupId&gt; &lt;artifactId&gt;sunjce_provider&lt;/artifactId&gt; &lt;scope&gt;system&lt;/scope&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;systemPath&gt;${JAVA_HOME}/jre/lib/sunjce_provider.jar&lt;/systemPath&gt; &lt;/dependency&gt; 缺点：要求调用这个jar的程序的jre版本与生成这个jar的jre版本一致。]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>AmazonClientException</tag>
        <tag>Algorithm</tag>
        <tag>HmacSHA256</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ProtoBuffers做数据通信]]></title>
    <url>%2F2016%2F04%2F20%2FProtoBuffers%2F</url>
    <content type="text"><![CDATA[Proto Buffers 简介Proto Buffers 是什么？Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data. @官网developers.google.com/protocol-buffers Code example： Define proto file message Person { required string name = 1; required int32 id = 2; optional string email = 3; } Write to outputstream Person john = Person.newBuilder() .setId(1234) .setName(&quot;John Doe&quot;) .setEmail(&quot;jdoe@example.com&quot;) .build(); output = new FileOutputStream(args[0]); john.writeTo(output); Parse from inputstream Person john; fstream input(argv[1], ios::in | ios::binary); john.ParseFromIstream(&amp;input); id = john.id(); name = john.name(); email = john.email();]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Protobuffers</tag>
      </tags>
  </entry>
</search>
